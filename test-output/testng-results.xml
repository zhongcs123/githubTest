<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="2" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="21" started-at="2019-05-27T02:59:15Z" finished-at="2019-05-27T02:59:15Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="21" started-at="2019-05-27T02:59:15Z" finished-at="2019-05-27T02:59:15Z">
      <class name="githubTest.githubTest01.Demo2">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:githubTest.githubTest01.Demo2@769c9116]" name="beforeClass" is-config="true" duration-ms="0" started-at="2019-05-27T10:59:15Z" finished-at="2019-05-27T10:59:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="FAIL" signature="test()[pri:0, instance:githubTest.githubTest01.Demo2@769c9116]" name="test" duration-ms="1" started-at="2019-05-27T10:59:15Z" finished-at="2019-05-27T10:59:15Z">
          <exception class="java.lang.Error">
            <message>
              <![CDATA[无法解析的编译问题：
	语法错误，将“;”插入到完整 BlockStatements 中
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Error: 无法解析的编译问题：
	语法错误，将“;”插入到完整 BlockStatements 中

	at githubTest.githubTest01.Demo2.test(Demo2.java:11)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:335)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:330)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Error -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:githubTest.githubTest01.Demo2@769c9116]" name="afterClass" is-config="true" duration-ms="0" started-at="2019-05-27T10:59:15Z" finished-at="2019-05-27T10:59:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- githubTest.githubTest01.Demo2 -->
      <class name="githubTest.githubTest01.githubDemoPush">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:githubTest.githubTest01.githubDemoPush@d70c109]" name="beforeClass" is-config="true" duration-ms="5" started-at="2019-05-27T10:59:15Z" finished-at="2019-05-27T10:59:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="f()[pri:0, instance:githubTest.githubTest01.githubDemoPush@d70c109]" name="f" duration-ms="4" started-at="2019-05-27T10:59:15Z" finished-at="2019-05-27T10:59:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:githubTest.githubTest01.githubDemoPush@d70c109]" name="afterClass" is-config="true" duration-ms="1" started-at="2019-05-27T10:59:15Z" finished-at="2019-05-27T10:59:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- githubTest.githubTest01.githubDemoPush -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
